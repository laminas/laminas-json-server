{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-json-server üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Provides a JSON-RPC server implementation. File issues at https://github.com/laminas/laminas-json-server/issues Documentation is at https://docs.laminas.dev/laminas-json-server/","title":"Home"},{"location":"#laminas-json-server","text":"","title":"laminas-json-server"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Provides a JSON-RPC server implementation. File issues at https://github.com/laminas/laminas-json-server/issues Documentation is at https://docs.laminas.dev/laminas-json-server/","title":"üá∫üá∏ To Citizens of Russia"},{"location":"error/","text":"Laminas\\Json\\Server\\Error JSON-RPC has a special format for reporting error conditions. All errors need to provide, minimally, an error message and error code; optionally, they can provide additional data, such as a backtrace. Error codes are derived from those recommended by the XML-RPC EPI project . Laminas\\Json\\Server appropriately assigns the code based on the error condition. For application exceptions, the code '-32000' is used. Laminas\\Json\\Server\\Error exposes the following methods: setCode($code) : Set the error code; if the code is not in the accepted XML-RPC error code range, -32000 will be assigned. getCode() : Retrieve the current error code. setMessage($message) : Set the error message. getMessage() : Retrieve the current error message. setData($data) : Set auxiliary data further qualifying the error, such as a backtrace. getData() : Retrieve any current auxiliary error data. toArray() : Cast the error to an array. The array will contain the keys 'code', 'message', and 'data'. toJson() : Cast the error to a JSON-RPC error representation.","title":"Laminas\\Json\\Server\\Error"},{"location":"error/#laminasjsonservererror","text":"JSON-RPC has a special format for reporting error conditions. All errors need to provide, minimally, an error message and error code; optionally, they can provide additional data, such as a backtrace. Error codes are derived from those recommended by the XML-RPC EPI project . Laminas\\Json\\Server appropriately assigns the code based on the error condition. For application exceptions, the code '-32000' is used. Laminas\\Json\\Server\\Error exposes the following methods: setCode($code) : Set the error code; if the code is not in the accepted XML-RPC error code range, -32000 will be assigned. getCode() : Retrieve the current error code. setMessage($message) : Set the error message. getMessage() : Retrieve the current error message. setData($data) : Set auxiliary data further qualifying the error, such as a backtrace. getData() : Retrieve any current auxiliary error data. toArray() : Cast the error to an array. The array will contain the keys 'code', 'message', and 'data'. toJson() : Cast the error to a JSON-RPC error representation.","title":"Laminas\\Json\\Server\\Error"},{"location":"intro/","text":"Introduction laminas-json-server is a JSON-RPC server implementation. It supports both the JSON-RPC version 1 specification as well as the version 2 specification ; additionally, it provides a PHP implementation of the Service Mapping Description (SMD) specification for providing service metadata to service consumers. JSON-RPC is a lightweight Remote Procedure Call protocol that utilizes JSON for its messaging envelopes. This JSON-RPC implementation follows PHP's SoapServer API. This means, in a typical situation, you will simply: Instantiate the server object. Attach one or more functions and/or classes/objects to the server object. handle() the request. laminas-json-server utilizes Laminas\\Server\\Reflection to perform reflection on any attached classes or functions, and uses that information to build both the SMD and enforce method call signatures. As such, it is imperative that any attached functions and/or class methods have full PHP docblocks documenting, minimally: All parameters and their expected variable types The return value variable type laminas-json-server listens for POST requests only at this time; fortunately, most JSON-RPC client implementations in the wild at the time of this writing will only POST requests as it is. This makes it simple to utilize the same server end point to both handle requests as well as to deliver the service SMD, as is shown in the next example.","title":"Intro"},{"location":"intro/#introduction","text":"laminas-json-server is a JSON-RPC server implementation. It supports both the JSON-RPC version 1 specification as well as the version 2 specification ; additionally, it provides a PHP implementation of the Service Mapping Description (SMD) specification for providing service metadata to service consumers. JSON-RPC is a lightweight Remote Procedure Call protocol that utilizes JSON for its messaging envelopes. This JSON-RPC implementation follows PHP's SoapServer API. This means, in a typical situation, you will simply: Instantiate the server object. Attach one or more functions and/or classes/objects to the server object. handle() the request. laminas-json-server utilizes Laminas\\Server\\Reflection to perform reflection on any attached classes or functions, and uses that information to build both the SMD and enforce method call signatures. As such, it is imperative that any attached functions and/or class methods have full PHP docblocks documenting, minimally: All parameters and their expected variable types The return value variable type laminas-json-server listens for POST requests only at this time; fortunately, most JSON-RPC client implementations in the wild at the time of this writing will only POST requests as it is. This makes it simple to utilize the same server end point to both handle requests as well as to deliver the service SMD, as is shown in the next example.","title":"Introduction"},{"location":"request/","text":"Laminas\\Json\\Server\\Request The JSON-RPC request environment is encapsulated in the Laminas\\Json\\Server\\Request object. This object allows you to set necessary portions of the JSON-RPC request, including the request ID, parameters, and JSON-RPC specification version. It has the ability to load itself via JSON or a set of options, and can render itself as JSON via the toJson() method. The request object has the following methods available: setOptions(array $options) : Specify object configuration. $options may contain keys matching any 'set' method: setParams() , setMethod() , setId() , and setVersion() . addParam($value, $key = null) : Add a parameter to use with the method call. Parameters can be just the values, or can optionally include the parameter name. addParams(array $params) : Add multiple parameters at once; proxies to addParam() . setParams(array $params) : Set all parameters at once; overwrites any existing parameters. getParam($index) : Retrieve a parameter by position or name. getParams() : Retrieve all parameters at once. setMethod($name) : Set the method to call. getMethod() : Retrieve the method that will be called. isMethodError() : Determine whether or not the request is malformed and would result in an error. setId($name) : Set the request identifier (used by the client to match requests to responses). getId() : Retrieve the request identifier. setVersion($version) : Set the JSON-RPC specification version the request conforms to. May be either '1.0' or '2.0'. getVersion() : Retrieve the JSON-RPC specification version used by the request. loadJson($json) : Load the request object from a JSON string. toJson() : Render the request as a JSON string. An HTTP specific version is available via Laminas\\Json\\Server\\Request\\Http . This class will retrieve the request via php://input , and allows access to the raw JSON via the getRawJson() method.","title":"Laminas\\Json\\Server\\Request"},{"location":"request/#laminasjsonserverrequest","text":"The JSON-RPC request environment is encapsulated in the Laminas\\Json\\Server\\Request object. This object allows you to set necessary portions of the JSON-RPC request, including the request ID, parameters, and JSON-RPC specification version. It has the ability to load itself via JSON or a set of options, and can render itself as JSON via the toJson() method. The request object has the following methods available: setOptions(array $options) : Specify object configuration. $options may contain keys matching any 'set' method: setParams() , setMethod() , setId() , and setVersion() . addParam($value, $key = null) : Add a parameter to use with the method call. Parameters can be just the values, or can optionally include the parameter name. addParams(array $params) : Add multiple parameters at once; proxies to addParam() . setParams(array $params) : Set all parameters at once; overwrites any existing parameters. getParam($index) : Retrieve a parameter by position or name. getParams() : Retrieve all parameters at once. setMethod($name) : Set the method to call. getMethod() : Retrieve the method that will be called. isMethodError() : Determine whether or not the request is malformed and would result in an error. setId($name) : Set the request identifier (used by the client to match requests to responses). getId() : Retrieve the request identifier. setVersion($version) : Set the JSON-RPC specification version the request conforms to. May be either '1.0' or '2.0'. getVersion() : Retrieve the JSON-RPC specification version used by the request. loadJson($json) : Load the request object from a JSON string. toJson() : Render the request as a JSON string. An HTTP specific version is available via Laminas\\Json\\Server\\Request\\Http . This class will retrieve the request via php://input , and allows access to the raw JSON via the getRawJson() method.","title":"Laminas\\Json\\Server\\Request"},{"location":"response/","text":"Laminas\\Json\\Server\\Response The JSON-RPC response payload is encapsulated in the Laminas\\Json\\Server\\Response object. This object allows you to set the return value of the request, whether or not the response is an error, the request identifier, the JSON-RPC specification version the response conforms to, and optionally the service map. The response object has the following methods available: setResult($value) : Set the response result. getResult() : Retrieve the response result. setError(Laminas\\Json\\Server\\Error $error) : Set an error object. If set, this will be used as the response when serializing to JSON. getError() : Retrieve the error object, if any. isError() : Whether or not the response is an error response. setId($name) : Set the request identifier (so the client may match the response with the original request). getId() : Retrieve the request identifier. setVersion($version) : Set the JSON-RPC version the response conforms to. getVersion() : Retrieve the JSON-RPC version the response conforms to. toJson() : Serialize the response to JSON. If the response is an error response, serializes the error object. setServiceMap($serviceMap) : Set the service map object for the response. getServiceMap() : Retrieve the service map object, if any. An HTTP specific version is available via Laminas\\Json\\Server\\Response\\Http . This class will send the appropriate HTTP headers as well as serialize the response as JSON.","title":"Laminas\\Json\\Server\\Response"},{"location":"response/#laminasjsonserverresponse","text":"The JSON-RPC response payload is encapsulated in the Laminas\\Json\\Server\\Response object. This object allows you to set the return value of the request, whether or not the response is an error, the request identifier, the JSON-RPC specification version the response conforms to, and optionally the service map. The response object has the following methods available: setResult($value) : Set the response result. getResult() : Retrieve the response result. setError(Laminas\\Json\\Server\\Error $error) : Set an error object. If set, this will be used as the response when serializing to JSON. getError() : Retrieve the error object, if any. isError() : Whether or not the response is an error response. setId($name) : Set the request identifier (so the client may match the response with the original request). getId() : Retrieve the request identifier. setVersion($version) : Set the JSON-RPC version the response conforms to. getVersion() : Retrieve the JSON-RPC version the response conforms to. toJson() : Serialize the response to JSON. If the response is an error response, serializes the error object. setServiceMap($serviceMap) : Set the service map object for the response. getServiceMap() : Retrieve the service map object, if any. An HTTP specific version is available via Laminas\\Json\\Server\\Response\\Http . This class will send the appropriate HTTP headers as well as serialize the response as JSON.","title":"Laminas\\Json\\Server\\Response"},{"location":"server/","text":"Laminas\\Json\\Server\\Server Laminas\\Json\\Server\\Server is the core class in the JSON-RPC offering; it handles all requests and returns the response payload. It has the following methods: addFunction($function) : Specify a userland function to attach to the server. setClass($class) : Specify a class or object to attach to the server; all public methods of that item will be exposed as JSON-RPC methods. fault($fault = null, $code = 404, $data = null) : Create and return a Laminas\\Json\\Server\\Error object. handle($request = false) : Handle a JSON-RPC request; optionally, pass a Laminas\\Json\\Server\\Request object to utilize (creates one by default). getFunctions() : Return a list of all attached methods. setRequest(Laminas\\Json\\Server\\Request $request) : Specify a request object for the server to utilize. getRequest() : Retrieve the request object used by the server. setResponse(Laminas\\Json\\Server\\Response $response) : Set the response object for the server to utilize. getResponse() : Retrieve the response object used by the server. setAutoEmitResponse($flag) : Indicate whether the server should automatically emit the response and all headers; by default, this is TRUE . autoEmitResponse() : Determine if auto-emission of the response is enabled. getServiceMap() : Retrieve the service map description in the form of a Laminas\\Json\\Server\\Smd object","title":"Laminas\\Json\\Server\\Server"},{"location":"server/#laminasjsonserverserver","text":"Laminas\\Json\\Server\\Server is the core class in the JSON-RPC offering; it handles all requests and returns the response payload. It has the following methods: addFunction($function) : Specify a userland function to attach to the server. setClass($class) : Specify a class or object to attach to the server; all public methods of that item will be exposed as JSON-RPC methods. fault($fault = null, $code = 404, $data = null) : Create and return a Laminas\\Json\\Server\\Error object. handle($request = false) : Handle a JSON-RPC request; optionally, pass a Laminas\\Json\\Server\\Request object to utilize (creates one by default). getFunctions() : Return a list of all attached methods. setRequest(Laminas\\Json\\Server\\Request $request) : Specify a request object for the server to utilize. getRequest() : Retrieve the request object used by the server. setResponse(Laminas\\Json\\Server\\Response $response) : Set the response object for the server to utilize. getResponse() : Retrieve the response object used by the server. setAutoEmitResponse($flag) : Indicate whether the server should automatically emit the response and all headers; by default, this is TRUE . autoEmitResponse() : Determine if auto-emission of the response is enabled. getServiceMap() : Retrieve the service map description in the form of a Laminas\\Json\\Server\\Smd object","title":"Laminas\\Json\\Server\\Server"},{"location":"smd/","text":"SMD: Service Mapping Description SMD stands for Service Mapping Description, a JSON schema that defines how a client can interact with a particular web service. At the time of this writing, the specification has not yet been formally ratified, but it is in use already within Dojo Toolkit as well as other JSON-RPC consumer clients. At its most basic, a Service Mapping Description indicates the method of transport ( POST , GET , TCP/IP, etc), the request envelope type (usually based on the protocol of the server), the target URL of the service provider, and a map of services available. In the case of JSON-RPC, the service map is a list of available methods, which each method documenting the available parameters and their types, as well as the expected return value type. Laminas\\Json\\Server\\Smd provides an object-oriented way to build service maps. At its most basic, you pass it metadata describing the service using mutators, and specify services (methods and functions). The service descriptions themselves are typically instances of Laminas\\Json\\Server\\Smd\\Service ; you can also pass all information as an array to the various service mutators in Laminas\\Json\\Server\\Smd , and it will instantiate a service for you. The service objects contain information such as the name of the service (typically the function or method name), the parameters (names, types, and position), and the return value type. Optionally, each service can have its own target and envelope, though this functionality is rarely used. Laminas\\Json\\Server\\Server actually does all of this behind the scenes for you, by using reflection on the attached classes and functions; you should create your own service maps only if you need to provide custom functionality that class and function introspection cannot offer. Methods available in Laminas\\Json\\Server\\Smd include: setOptions(array $options) : Setup an SMD object from an array of options. All mutators (methods beginning with 'set') can be used as keys. setTransport($transport) : Set the transport used to access the service; only POST is currently supported. getTransport() : Get the current service transport. setEnvelope($envelopeType) : Set the request envelope that should be used to access the service. Currently, supports the constants Laminas\\Json\\Server\\Smd::ENV_JSONRPC_1 and Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2 . getEnvelope() : Get the current request envelope. setContentType($type) : Set the content type requests should use (by default, this is 'application/json'). getContentType() : Get the current content type for requests to the service. setTarget($target) : Set the URL endpoint for the service. getTarget() : Get the URL endpoint for the service. setId($id) : Typically, this is the URL endpoint of the service (same as the target). getId() : Retrieve the service ID (typically the URL endpoint of the service). setDescription($description) : Set a service description (typically narrative information describing the purpose of the service). getDescription() : Get the service description. setDojoCompatible($flag) : Set a flag indicating whether or not the SMD is compatible with Dojo toolkit. When TRUE , the generated JSON SMD will be formatted to comply with the format that Dojo's JSON-RPC client expects. isDojoCompatible() : Returns the value of the Dojo compatibility flag ( FALSE , by default). addService($service) : Add a service to the map. May be an array of information to pass to the constructor of Laminas\\Json\\Server\\Smd\\Service , or an instance of that class. addServices(array $services) : Add multiple services at once. setServices(array $services) : Add multiple services at once, overwriting any previously set services. getService($name) : Get a service by its name. getServices() : Get all attached services. removeService($name) : Remove a service from the map. toArray() : Cast the service map to an array. toDojoArray() : Cast the service map to an array compatible with Dojo Toolkit. toJson() : Cast the service map to a JSON representation. Laminas\\Json\\Server\\Smd\\Service has the following methods: setOptions(array $options) : Set object state from an array. Any mutator (methods beginning with 'set') may be used as a key and set via this method. setName($name) : Set the service name (typically, the function or method name). getName() : Retrieve the service name. setTransport($transport) : Set the service transport (currently, only transports supported by Laminas\\Json\\Server\\Smd are allowed). getTransport() : Retrieve the current transport. setTarget($target) : Set the URL endpoint of the service (typically, this will be the same as the overall SMD to which the service is attached). getTarget() : Get the URL endpoint of the service. setEnvelope($envelopeType) : Set the service envelope (currently, only envelopes supported by Laminas\\Json\\Server\\Smd are allowed). getEnvelope() : Retrieve the service envelope type. addParam($type, array $options = array(), $order = null) : Add a parameter to the service. By default, only the parameter type is necessary. However, you may also specify the order, as well as options such as: name : the parameter name optional : whether or not the parameter is optional default : a default value for the parameter description : text describing the parameter addParams(array $params) : Add several parameters at once; each param should be an assoc array containing minimally the key 'type' describing the parameter type, and optionally the key 'order'; any other keys will be passed as $options to addOption() . setParams(array $params) : Set many parameters at once, overwriting any existing parameters. getParams() : Retrieve all currently set parameters. setReturn($type) : Set the return value type of the service. getReturn() : Get the return value type of the service. toArray() : Cast the service to an array. toJson() : Cast the service to a JSON representation.","title":"Service Mapping Description (SMD)"},{"location":"smd/#smd-service-mapping-description","text":"SMD stands for Service Mapping Description, a JSON schema that defines how a client can interact with a particular web service. At the time of this writing, the specification has not yet been formally ratified, but it is in use already within Dojo Toolkit as well as other JSON-RPC consumer clients. At its most basic, a Service Mapping Description indicates the method of transport ( POST , GET , TCP/IP, etc), the request envelope type (usually based on the protocol of the server), the target URL of the service provider, and a map of services available. In the case of JSON-RPC, the service map is a list of available methods, which each method documenting the available parameters and their types, as well as the expected return value type. Laminas\\Json\\Server\\Smd provides an object-oriented way to build service maps. At its most basic, you pass it metadata describing the service using mutators, and specify services (methods and functions). The service descriptions themselves are typically instances of Laminas\\Json\\Server\\Smd\\Service ; you can also pass all information as an array to the various service mutators in Laminas\\Json\\Server\\Smd , and it will instantiate a service for you. The service objects contain information such as the name of the service (typically the function or method name), the parameters (names, types, and position), and the return value type. Optionally, each service can have its own target and envelope, though this functionality is rarely used. Laminas\\Json\\Server\\Server actually does all of this behind the scenes for you, by using reflection on the attached classes and functions; you should create your own service maps only if you need to provide custom functionality that class and function introspection cannot offer. Methods available in Laminas\\Json\\Server\\Smd include: setOptions(array $options) : Setup an SMD object from an array of options. All mutators (methods beginning with 'set') can be used as keys. setTransport($transport) : Set the transport used to access the service; only POST is currently supported. getTransport() : Get the current service transport. setEnvelope($envelopeType) : Set the request envelope that should be used to access the service. Currently, supports the constants Laminas\\Json\\Server\\Smd::ENV_JSONRPC_1 and Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2 . getEnvelope() : Get the current request envelope. setContentType($type) : Set the content type requests should use (by default, this is 'application/json'). getContentType() : Get the current content type for requests to the service. setTarget($target) : Set the URL endpoint for the service. getTarget() : Get the URL endpoint for the service. setId($id) : Typically, this is the URL endpoint of the service (same as the target). getId() : Retrieve the service ID (typically the URL endpoint of the service). setDescription($description) : Set a service description (typically narrative information describing the purpose of the service). getDescription() : Get the service description. setDojoCompatible($flag) : Set a flag indicating whether or not the SMD is compatible with Dojo toolkit. When TRUE , the generated JSON SMD will be formatted to comply with the format that Dojo's JSON-RPC client expects. isDojoCompatible() : Returns the value of the Dojo compatibility flag ( FALSE , by default). addService($service) : Add a service to the map. May be an array of information to pass to the constructor of Laminas\\Json\\Server\\Smd\\Service , or an instance of that class. addServices(array $services) : Add multiple services at once. setServices(array $services) : Add multiple services at once, overwriting any previously set services. getService($name) : Get a service by its name. getServices() : Get all attached services. removeService($name) : Remove a service from the map. toArray() : Cast the service map to an array. toDojoArray() : Cast the service map to an array compatible with Dojo Toolkit. toJson() : Cast the service map to a JSON representation. Laminas\\Json\\Server\\Smd\\Service has the following methods: setOptions(array $options) : Set object state from an array. Any mutator (methods beginning with 'set') may be used as a key and set via this method. setName($name) : Set the service name (typically, the function or method name). getName() : Retrieve the service name. setTransport($transport) : Set the service transport (currently, only transports supported by Laminas\\Json\\Server\\Smd are allowed). getTransport() : Retrieve the current transport. setTarget($target) : Set the URL endpoint of the service (typically, this will be the same as the overall SMD to which the service is attached). getTarget() : Get the URL endpoint of the service. setEnvelope($envelopeType) : Set the service envelope (currently, only envelopes supported by Laminas\\Json\\Server\\Smd are allowed). getEnvelope() : Retrieve the service envelope type. addParam($type, array $options = array(), $order = null) : Add a parameter to the service. By default, only the parameter type is necessary. However, you may also specify the order, as well as options such as: name : the parameter name optional : whether or not the parameter is optional default : a default value for the parameter description : text describing the parameter addParams(array $params) : Add several parameters at once; each param should be an assoc array containing minimally the key 'type' describing the parameter type, and optionally the key 'order'; any other keys will be passed as $options to addOption() . setParams(array $params) : Set many parameters at once, overwriting any existing parameters. getParams() : Retrieve all currently set parameters. setReturn($type) : Set the return value type of the service. getReturn() : Get the return value type of the service. toArray() : Cast the service to an array. toJson() : Cast the service to a JSON representation.","title":"SMD: Service Mapping Description"},{"location":"usage/","text":"Basic Usage First, let's define a class we wish to expose via the JSON-RPC server. We'll call the class Calculator , and define methods for add , subtract , multiply , and divide : /** * Calculator - sample class to expose via JSON-RPC */ class Calculator { /** * Return sum of two variables * * @param int $x * @param int $y * @return int */ public function add($x, $y) { return $x + $y; } /** * Return difference of two variables * * @param int $x * @param int $y * @return int */ public function subtract($x, $y) { return $x - $y; } /** * Return product of two variables * * @param int $x * @param int $y * @return int */ public function multiply($x, $y) { return $x * $y; } /** * Return the division of two variables * * @param int $x * @param int $y * @return float */ public function divide($x, $y) { return $x / $y; } } Note that each method has a docblock with entries indicating each parameter and its type, as well as an entry for the return value. This is absolutely critical when utilizing laminas-json-server or any other server component in Laminas, for that matter. Now we'll create a script to handle the requests: $server = new Laminas\\Json\\Server\\Server(); // Indicate what functionality is available: $server-&gt;setClass('Calculator'); // Handle the request: $server-&gt;handle(); However, this will not address the issue of returning an SMD so that the JSON-RPC client can autodiscover methods. That can be accomplished by determining the HTTP request method, and then specifying some server metadata: $server = new Laminas\\Json\\Server\\Server(); $server-&gt;setClass('Calculator'); if ('GET' == $_SERVER['REQUEST_METHOD']) { // Indicate the URL endpoint, and the JSON-RPC version used: $server-&gt;setTarget('/json-rpc.php') -&gt;setEnvelope(Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2); // Grab the SMD $smd = $server-&gt;getServiceMap(); // Return the SMD to the client header('Content-Type: application/json'); echo $smd; return; } $server-&gt;handle(); If utilizing the JSON-RPC server with Dojo toolkit, you will also need to set a special compatibility flag to ensure that the two interoperate properly: $server = new Laminas\\Json\\Server\\Server(); $server-&gt;setClass('Calculator'); if ('GET' == $_SERVER['REQUEST_METHOD']) { $server-&gt;setTarget('/json-rpc.php') -&gt;setEnvelope(Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2); $smd = $server-&gt;getServiceMap(); // Set Dojo compatibility: $smd-&gt;setDojoCompatible(true); header('Content-Type: application/json'); echo $smd; return; } $server-&gt;handle();","title":"Basic Usage"},{"location":"usage/#basic-usage","text":"First, let's define a class we wish to expose via the JSON-RPC server. We'll call the class Calculator , and define methods for add , subtract , multiply , and divide : /** * Calculator - sample class to expose via JSON-RPC */ class Calculator { /** * Return sum of two variables * * @param int $x * @param int $y * @return int */ public function add($x, $y) { return $x + $y; } /** * Return difference of two variables * * @param int $x * @param int $y * @return int */ public function subtract($x, $y) { return $x - $y; } /** * Return product of two variables * * @param int $x * @param int $y * @return int */ public function multiply($x, $y) { return $x * $y; } /** * Return the division of two variables * * @param int $x * @param int $y * @return float */ public function divide($x, $y) { return $x / $y; } } Note that each method has a docblock with entries indicating each parameter and its type, as well as an entry for the return value. This is absolutely critical when utilizing laminas-json-server or any other server component in Laminas, for that matter. Now we'll create a script to handle the requests: $server = new Laminas\\Json\\Server\\Server(); // Indicate what functionality is available: $server-&gt;setClass('Calculator'); // Handle the request: $server-&gt;handle(); However, this will not address the issue of returning an SMD so that the JSON-RPC client can autodiscover methods. That can be accomplished by determining the HTTP request method, and then specifying some server metadata: $server = new Laminas\\Json\\Server\\Server(); $server-&gt;setClass('Calculator'); if ('GET' == $_SERVER['REQUEST_METHOD']) { // Indicate the URL endpoint, and the JSON-RPC version used: $server-&gt;setTarget('/json-rpc.php') -&gt;setEnvelope(Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2); // Grab the SMD $smd = $server-&gt;getServiceMap(); // Return the SMD to the client header('Content-Type: application/json'); echo $smd; return; } $server-&gt;handle(); If utilizing the JSON-RPC server with Dojo toolkit, you will also need to set a special compatibility flag to ensure that the two interoperate properly: $server = new Laminas\\Json\\Server\\Server(); $server-&gt;setClass('Calculator'); if ('GET' == $_SERVER['REQUEST_METHOD']) { $server-&gt;setTarget('/json-rpc.php') -&gt;setEnvelope(Laminas\\Json\\Server\\Smd::ENV_JSONRPC_2); $smd = $server-&gt;getServiceMap(); // Set Dojo compatibility: $smd-&gt;setDojoCompatible(true); header('Content-Type: application/json'); echo $smd; return; } $server-&gt;handle();","title":"Basic Usage"}]}